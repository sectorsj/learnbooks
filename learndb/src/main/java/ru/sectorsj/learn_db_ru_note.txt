// https://learndb.ru/articles

// Сайт Learndb.ru учебник

// 1. Введение

// 1.1 Синтаксис SQL запроса

// Простейший запрос на языке SQL:
    SELECT 'Hello, world!'

// В общем виде SQL запрос выглядит следующим образом:
    SELECT список_полей
    FROM список_таблиц

// Хотя на самом деле немного сложнее:
    SELECT список_полей
    FROM список_таблиц
    WHERE ограничение_на_список_строк
    GROUP BY условие_группировки
    HAVING ограничения_на_строки_после_группировки
    ORDER BY порядок_сортировки
    LIMIT ограничение_количества_записей

// И даже это еще не все... Но обо всем по порядку.

// Если предложение FROM опущено, то оператор SELECT вернет ровно одну строку
// со значениями, состоящими из:
// - констант
// - строковых литералов,
// - результатов вызовов функций
// - операций
// над всем вышеперечисленным.

// В запросе:
    SELECT 'Hello, world!'

// SELECT - ключевое слово языка SQL
// 'Hello, world!' - строковый литерал

// В результате выполнения запроса,
// получаем одну строку с одним столбцом со значением 'Hello, world!'.

// Для получения нескольких столбцов
// необходимо перечислить выражения через запятую:
    SELECT 'Hello', 'World!'


// 1.2 Получение данных из таблиц

// Для получения всех данных из таблицы с названием table1, достаточно выполнить запрос:
    SELECT *
    FROM table1

// FROM - ключевого слова, указывающее на то, из какой таблицы выбирать данные
// *    - символ звездочка, говорит о необходимости выбора всех полей из таблицы

// Обычно нужно получить не все столбцы таблицы, а какую-то их часть.
// Чтобы выбрать определенные столбцы, нужно перечислить их через запятую после ключевого слова SELECT.

// Пример:
// Чтобы получить столбцы col1, col2 и col3 из таблицы table1,
// нужно написать следующий запрос:
    SELECT col1, col2, col3
    FROM table1

// Столбцам в запросе можно назначить "Псевдоним" (по сути переименовать столбец).

// Это необходимо делать как минимум при выполнении в списке выборки операций над:
// - столбцами таблицы
// - конкатенации строк
// - вызове функции
// - и т.д.

// Для назначение столбцу псевдонима, следует после выражения написать
// ключевое слово AS и за ним новое название, например:
    SELECT 1 AS one, 'Бим' AS dog_name

// Слово AS является необязательным и его можно опустить.

// Вышеуказанный пример можно переписать в следующей форме:
    SELECT 1 one, 'Бим' dog_name

// Псевдонимы как и, все идентификаторы и ключевые слова SQL,
// должны начинаться с:
// - буквы (a-z)
// - подчёркивания (_)

// Последующими символами могут быть:
//  - буквы,
//  - цифры (0-9)
//  - знаки доллара ($)
//  - подчёркивания (_)

// 1. Псевдонимы без кавычек воспринимаются системой без учета регистра.
//    Таким образом:
//     - dog_name
//     - DOG_NAME
//     - Dog_Name
//    являются идентичными.

// 2. Псевдонимы в двойных кавычках становится регистро-чувствительными
//    и могут состоять из произвольной последовательности символов,
//    Пример:
//      - "имя собаки",
//      - "1",
//      - "dogName".

// Максимальная длина псевдонима равна 63 символам,
// хотя ее можно изменить в настройках сервера.


// 1.3. Вызов функции

// В запросах допускается вызывать функции.

// Пример:
// Чтобы получить текущее время на сервере, можно вызвать функцию now():
    SELECT now();

// Иногда требуется приведение строки в верхний регистр, для этого используют функцию upper:
    SELECT upper('elephant')

// Для вызова функции необходимо:
//  - указать ее имя
// - перечислить список параметров (в скобках через запятую):
    имя_функции(выражение1, выражение2, ...)

// Параметром функции может выступать:
//  - значение столбца таблицы,
//  - строковый литерал,
//  - константа,
//  - вызов функции
//  - любое выражение над всем вышеперечисленным.

// В PostgreSQL огромное количество встроенных функций.

// Помимо встроенных функций пользователь может реализовать и свои собственные.