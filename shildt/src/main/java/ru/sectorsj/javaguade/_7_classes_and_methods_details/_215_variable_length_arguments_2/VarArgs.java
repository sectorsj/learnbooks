package ru.sectorsj.book.shild.javaguade._7_classes_and_methods_details._215_variable_length_arguments_2;

/**
 * Для указания аргументов переменной длины
 * служат три точки (•••).
 *
 * Пример, где метод vaTest()
 * можно объявить с аргументами переменной длины.
 *
 * static void vaTest(int ... v) {}
 *
 * В этой синтаксической конструкции компилятору предписывается,
 * что метод vaTest() может вызываться
 * без аргументов или с несколькими аргументами.
 *
 * В итоге массив v неявно объявляется как массив типа int[].
 *
 * В теле метода vaTest() доступ к массиву v
 * осуществляется с помощью синтаксиса обычного массива.
 */
// Демонстрация применение аргументов переменной длины
class VarArgs {

    // Теперь метод vaTest() объявляется
    // с аргументами переменой длинны
    static void vaTest(int ... v) {
        System.out.print("Количество аргументов: " + v.length + " Содержимое: ");
        for (int x : v) {
            System.out.print(x + " ");
        }
        System.out.println();
    }

    /**
     * Отметим две важные особенности этой версии программы.
     *
     * 1) в теле метода vaTest() переменная v действует как массив,
     *    поскольку она действительно является массивом.
     *
     *    Синтаксическая конструкция "..." указывает компилятору,
     *    что в данном методе предполагается использовать
     *    переменное количество аргументов,
     *    и эти аргументы будут храниться в массиве,
     *    на который ссылается переменная "v".
     *
     * 2) метод vaTest() вызывается в методе main()
     *    с разным количеством аргументов,
     *    в том числе и совсем без них.
     *
     *    Аргументы автоматически размещаются
     *    в массиве и передаются переменной v.
     *
     *    Если же аргументы отсутствуют,
     *    длина этого массива равна нулю.
     *
     *    Наряду с параметром переменной длины
     *    у метода могут быть и "обычные" параметры.
     *
     *    ВАЖНО!
     *    Параметр переменной длины
     *    должен быть ПОСЛЕДНИМ среди всех параметров,
     *    объявляемых в методе.
     *
     * Пример1: допустимо объявление метода:
     *          int doIt(int a, int b, double c, int ... vals) {
     *          В данном случае, первые три аргумента,
     *          указанные в объявлении метода doIt(),
     *          соответствуют первым трем параметрам.
     *
     *          А все остальные аргументы считаются
     *          принадлежащими параметру vals.
     *
     *          ВАЖНО!!
     *          Параметр с переменным количеством
     *          аргументов должен быть последним.
     *
     * Пример2: объявление метода сделано неправильно:
     *          int doIt(int a, int b, double c, int ...vals, boolean stopFlag) { // ОШИБКА!
     *          В данном примере предпринимается попытка
     *          объявить обычный параметр после параметра
     *          с переменным количеством аргументов, что недопустимо.
     *
     *          ВАЖНО!!!
     *          Существует еще одно ограничение, о котором следует знать:
     *          метод должен содержать только один параметр
     *          с переменным количеством аргументов.
     *
     * Пример3: неверное объявления метода
     *          с переменной длиной аргументов:
     *          int doIt(int a, int b, double c, int ... vals, double ... morevals) { //ОШИБКА!
     *          Попытка объявить второй параметр
     *          с переменным количеством аргументов недопустима.
     */

    /*
      Возможные способы вызова
      метода vaTest() с аргументами переменной длинны
     */
    public static void main(String[] args) {

        vaTest(10);           // 1 аргумент
        vaTest(1, 2, 3);      // 3 аргумента
        vaTest();                // без аргументов
    }

    /*
     * Программа выводит следующий результат:
     *
     * Количество аргументов: 1 Содержимое: 10
     * Количество аргументов: 3 Содержимое: 1 2 3
     * Количество аргументов: 0 Содержимое:
     */
}
