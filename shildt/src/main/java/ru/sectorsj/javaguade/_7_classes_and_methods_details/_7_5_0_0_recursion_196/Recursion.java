package ru.sectorsj.book.shild.javaguade._7_classes_and_methods_details._7_5_0_0_recursion_196;

/**
 * 7.5.0.0 - РЕКУРСИЯ
 *
 * В языке Java поддерживается рекурсия.
 *
 * Рекурсия - процесс определения чего-либо
 *            относительно самого себя.
 *
 * Рекурсивный метод - позволяет с помощью рекурсии
 *                     вызывать самого себя.
 *
 * Алгоритм выполнения рекурсивного метода:
 * 1) Когда рекурсивный метод вызывает сам себя.
 *
 * 2) Новым локальным переменным и новым параметрам
 *    выделяется место в стеке и код метода выполняется
 *    с этими новыми исходными значениями.
 *
 * 3) При каждом возврате из вызова рекурсивного метода
 *      - прежние локальные переменные
 *      - параметры
 *    удаляются из стека, а выполнение продолжается
 *    с точки вызова в самом методе.
 *
 * 4) Рекурсивные методы выполняют действия,
 *    которые можно сравнить с раскладыванием
 *    и складыванием телескопической трубы.
 *
 * ВАЖНО!
 * Вследствие издержек на дополнительные вызовы
 * рекурсивные варианты многих процедур
 * могут выполняться медленнее их итерационных аналогов.
 *
 * 5) Слишком большое количество вызовов рекурсивного метода
 *    может привести к переполнению стека,
 *    поскольку:
 *     - параметры
 *     - локальные переменные
 *    сохраняются в стеке, а при каждом новом вызове
 *    создаются новые копии этих значений.
 *
 * 6) В таком случае в исполняющей системе Java возникнет исключение.
 *
 * 7) Подобная ситуация не возникнет,
 *    если не выпустить рекурсивный метод из-под контроля.
 *
 * ВАЖНО!!
 * Рекурсивные методы можно применять
 * для реализации более простых
 * и понятных вариантов некоторых алгоритмов,
 * чем их итерационные аналоги.
 *
 * Где применяются рекурсивные методы:
 * 1) Алгоритм быстрой сортировки,
 *    где очень трудно реализовать итерационный способ.
 *
 * 2) Некоторые виды алгоритмов "искусственного интеллекта",
 *    легче всего реализовать с помощью рекурсивных решений.
 *
 * ВАЖНО!!!
 * 1) При написании рекурсивных методов
 *    следует позаботиться о том,
 *    чтобы в каком-нибудь месте программы
 *    присутствовал условный оператор if,
 *    осуществляющий возврат из метода
 *    без его рекурсивного вызова.
 *
 * 2) В противном случае не произойдет
 *    возврата из рекурсивно вызываемого метода.
 *
 * 3) Подобная ошибка очень часто встречается
 *    при организации рекурсии.
 *
 * 4) На стадии разработки рекурсивных методов
 *    рекомендуется чаще делать вызовы метода println(),
 *    чтобы следить за происходящим
 *    и прерывать выполнение алгоритма при обнаружении ошибки.
 */
class Recursion {
}