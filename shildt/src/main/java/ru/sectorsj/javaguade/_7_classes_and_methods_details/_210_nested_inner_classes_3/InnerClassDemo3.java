package ru.sectorsj.book.shild.javaguade._7_classes_and_methods_details._210_nested_inner_classes_3;

/**
 * Ранее основное внимание было уделено внутренним классам,
 * определенным в качестве членов
 * в области видимости внешнего класса.
 *
 * Но внутренние классы можно определять
 * и в области видимости любого блока кода.
 * Вложенный класс можно определить в блоке кода,
 * относящегося к методу, или даже в теле цикла for.
 */

// Создаем обычный класс Outer,
// который в дальнейшем будем внешним
// для внутреннего класса Inner
class Outer {
    // Создаем поле класса Outer
    int outer_x = 100;

    // Создаем метод класса Outer
    void test() {
        // Создаем цикл for,
        for (int i = 0; i < 10; i++) {

            // Созадем внутренний класс Inner
            // внутри цикла For
            class Inner{

                // Создаем метод класса Inner
                void display() {
                    // Обращаемся к переменной внешнего класса Outer
                    // из метода внутреннего класса Inner
                    System.out.println("Вывод: outer_x = " + outer_x);
                }
            }
            // В методе test() класса Outer
            // Инициализируем внутренний класс Inner
            Inner inner = new Inner();
            // Вызываем метод display() из переменной класса Inner
            inner.display();
        }
    }
}
class InnerClassDemo3 {
    public static void main(String[] args) {

        // Инициализируем класс Outer
        Outer outer = new Outer();

        // Вызваем метод класса Outer - test(),
        // который внутри содержит метод
        // вложенного класса Inner - display()
        outer.test();
    }

    /**
     * Программа выводит следующий результат:
     *
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     * Вывод: outer_x = 100
     *
     * Вложенные классы можно применять не во всех случаях.
     *
     * Они особенно удобны для обработки событий.
     *
     * В главе 24: про внутренние классы:
     * - для обработки определенных типов событий;
     * - анонимные (т.е. безымянные).
     *
     * Важно!!!
     * В первоначальной спецификации языка Java,
     * относящейся к версии 1.0,
     * вложенные классы не допускались.
     * Они появились лишь в версии Java 1.1
     */
}
