package ru.sectorsj.book.shild.javaguade._7_classes_and_methods_details._7_6_0_0_access_control_intro_199;

/**
 * 7.6.0.0 - ВВЕДЕНИЕ В УПРАВЛЕНИЕ ДОСТУПОМ
 *
 * Инкапсуляция:
 * 1) связывает данные с манипулирующим этими данными кодом;
 * 2) управление доступом;
 *      а) модификаторы доступа (глава 7)
 *      б) наследование
 *      в) пакеты (глава 9)
 *      г) модули (глава 16)
 *
 * 1) Инкапсуляция позволяет управлять доступом
 *    к членам класса из отдельных частей программы,
 *    предотвращая злоупотребления.
 *
 * 2) Предоставляя доступ к данным только с помощью
 *    вполне определенного ряда методов,
 *    можно предотвратить злоупотребление этими данными.
 *
 * 3) Если класс реализован правильно,
 *    он создает своего рода "черный ящик",
 *    с внутренним механизмом, защищенным от повреждений,
 *    которым можно пользоваться.
 *
 * Созданные ранее классы не полностью удовлетворяют этим требованиям:
 *
 * Класс Stack (главы 6):
 *
 * 1) Несмотря на то, что методы:
 *     - push()
 *     - рор()
 *    действительно предоставляют управляемый интерфейс со стеком,
 *    придерживаться этого интерфейса совсем не обязательно.
 *
 * 2) Это означает, что другая часть программы может обойти
 *    эти методы и обратиться к стеку непосредственно.
 *
 * 3) Злоумышленник обязательно воспользуется такой возможностью.
 *    В этом разделе представлен механизм,
 *    с помощью которого можно точно управлять доступом
 *    к разным членам класса.
 *
 * Способ доступа к члену класса
 * определяется модификатором доступа,
 * присутствующим в его объявлении.
 *
 * В языке Java определен обширный ряд модификаторов доступа.
 *
 * Некоторые аспекты управления доступом связаны с:
 *  - наследованием
 *  - пакетами
 *
 * ВАЖНО!
 * Пакет - это группировка классов
 *
 * Эти составляющие механизма управления доступом
 * в Java будут описаны в последующих разделах.
 *
 * Важно!!!
 * Модули (главе 16) внедренные в версии JDK 9,
 * могут также оказывать влияние на управление доступом.
 */
public class AccessControl {
}