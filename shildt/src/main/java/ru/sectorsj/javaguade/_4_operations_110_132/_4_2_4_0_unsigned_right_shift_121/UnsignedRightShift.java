package ru.sectorsj.book.shild.javaguade._4_operations_110_132._4_2_4_0_unsigned_right_shift_121;

/**
 * 4.2.4.0 - Беззнаковый сдвиг вправо
 *
 * При каждом выполнении операции ">>"
 * старший двоичный разряд автоматически
 * заполняется своим предыдущим содержимым.
 *
 * В итоге сохраняется знак сдвигаемого значения.
 *
 * Но иногда это нежелательно.
 *
 * при сдвиге вправо двоичных разрядов
 * какого-нибудь нечислового значения
 * расширение знака может быть нежелательным.
 *
 * Подобная ситуация нередко возникает
 * при обработке значений отдельных пикселей
 * в графических изображениях.
 *
 * В подобных случаях требуется сдвиг "0"
 * на позицию старшего двоичного разряда
 * независимо от его первоначального значения.
 *
 * Это так называемый беззнаковый сдвиг.
 *
 * Для этой цели в Java имеется операция беззнакового сдвига вправо.
 *
 * ">>>" - беззнаковый сдвиг вправо
 *         всегда вставляет нуль
 *         на позиции старшего двоичного разряда.
 *
 * Пример 1:
 * 1) переменной a присваивается значение -1,
 *    где во всех 32 битах двоичного представления
 *    устанавливается 1.
 * 2) в этом значении выполняется сдвиг вправо на 24 бита,
 *    в ходе которого 24 старших двоичных разряда,
 *    заполняются нулями и игнорируется обычное расширение знака.
 * 3) в переменной a устанавливается значение 255.
 *
 * ВАЖНО!
 * Чтобы операция беззнакового сдвига вправо стала понятнее,
 * она представлена в двоичной форме.
 *
 * int a = -1;
 * а = а >>> 24;
 *
 * 11111111 11111111 11111111 11111111  -> значение -1 типа int в двоичном виде
 * >>> 24
 * ___________________________________
 * 00000000 00000000 00000000 11111111  -> значение 255 типа int в двоичном виде
 *
 *
 * Нередко операция ">>>"
 * оказывается не такой полезной,
 * как хотелось бы,
 * поскольку ее выполнение
 * имеет смысл только для:
 * а) 32-разрядных значений
 * б) 64-разрядных значений
 *
 * В выражениях тип меньших значений:
 * - byte
 * - short
 * автоматически продвигается к типу int.
 *
 * Расширение знака и сдвиг
 * происходят:
 *  а) в 32-разрядных,
 * а не:
 *  а) 16-разрядных значениях
 *  б) 8-разрядных значениях
 */
public class UnsignedRightShift {
    public static void main(String[] args) {
        int a = -1;
        a = a >>> 24;

        System.out.println("a = " + a);
    }
}

