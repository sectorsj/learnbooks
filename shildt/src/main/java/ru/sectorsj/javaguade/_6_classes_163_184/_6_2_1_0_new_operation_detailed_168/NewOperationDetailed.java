package ru.sectorsj.book.shild.javaguade._6_classes_163_184._6_2_1_0_new_operation_detailed_168;


/**
 * 6.2.1.0 - ПОДРОБНОЕ РАССМОТРЕНИЕ ОПЕРАЦИИ - NEW
 *
 * Операция new - динамически выделяет оперативную память для объекта.
 *
 * Общая форма операции new:
 * переменная_класса = new имя_класса();
 *
 * 1) "переменная_класса" - обозначает переменную создаваемого класса
 * 2) "имя_класса"        - конкретное имя класса, экземпляр которого получается.
 *
 * "имя_класса", за которым следуют круглые скобки,
 * обозначает конструктор данного класса.
 *
 * Конструктор - определяет действия, выполняемые
 *               при создании объекта класса.
 *
 * 1) Конструкторы являются важной частью всех классов
 *    и обладают множеством важных свойств.
 *
 * 2) В большинстве классов, явно объявляются
 *    свои конструкторы в пределах определения класса.
 *
 * 3) Но если ни один из явных конструкторов не указан,
 *    то в Java будет автоматически предоставлен конструктор по умолчанию.
 *
 * Именно это и происходит при создании объекта класса Вох.
 *
 * В рассматриваемых примерах будет употребляться конструктор по умолчанию,
 * в дальнейшем будет показано, как определять собственные конструкторы.
 *
 * Вопрос:
 * почему операция "new" не требуется для таких типов данных,
 * как целочисленные или символьные?
 *
 * Ответ:
 * примитивные типы данных в Java реализованы
 * не в виде объектов, а как "обычные" переменные.
 * Сделано это для повышения эффективности.
 *
 * Объекты обладают:
 *  - свойствами
 *  - средствами,
 * которые требуют,
 * чтобы они трактовались в Java иначе,
 * чем примитивные типы.
 *
 * ВАЖНО!
 * Отсутствие таких же издержек, как и на обращение с объектами,
 * позволяет эффективнее реализовать примитивные типы данных.
 *
 * ВАЖНО!!
 * В дальнейшем будут представлены объектные версии примитивных типов,
 * которые могут пригодиться в тех случаях,
 * когда требуются полноценные объекты этих типов.
 *
 * Операция "new" выделяет оперативную память
 * для объекта во время выполнения.
 *
 * Преимущество такого подхода состоит в том,
 * что в программе можно создать ровно столько объектов,
 * сколько требуется во время ее выполнения.
 *
 * Но поскольку объем оперативной памяти ограничен,
 * возможны случаи, когда операция "new"
 * не в состоянии выделить память для объекта из-за ее нехватки.
 *
 * В таком случае возникает:
 *  - исключение времени выполнения
 *    RuntimeException
 * Обработка исключений (глава 10)
 *
 * В приведенных примерах недостатка в объеме памяти не возникает,
 * но в реальных программах такую возможность нужно учитывать.
 *
 * Отличие класса от объекта (еще раз):
 *
 * 1) Класс - это логическая конструкция.
 *            Он создает новый тип данных,
 *            который можно использовать для создания объектов.
 *            Класс создает логический каркас,
 *            определяющий взаимосвязь между его членами.
 *
 * 2) Объект - имеет физическую сущность.
 *             При объявлении объекта класса,
 *             создается ЭКЗЕМПЛЯР этого класса.
 *             Объект занимает конкретную область оперативной памяти.
 */
public class NewOperationDetailed {
}