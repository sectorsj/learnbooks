package ru.sectorsj.book.shild.javaguade._6_classes_163_184._6_5_1_0_constructor_example__177;

/**
 * 6.5.1.0 - Пример использования конструктора.
 *
 * Пример из раздела 6.4.3.1 можно переделать,
 * чтобы значения размеров параллелепипеда
 * присваивались при конструировании объекта.
 *
 * Для этого придется заменить:
 *  метод setDimension() -> на конструктор
 *
 * 1) Сначала определяется простой конструктор,
 *    устанавливающий одинаковые значения размеров
 *    всех параллелепипедов.
 *
 * Пример 1.1, 1.2:
 * Для инициализации размеров параллелепипеда
 * в классе Вох применяется конструктор
 *
 * В примере 1.1:
 * Вместо метода setDimension()
 * создается конструктор будущего объекта.
 * public Box() {
 *         System.out.println("Конструирование объекта Box");
 *         width  = 10;
 *         height = 10;
 *         depth  = 10;
 *     }
 *
 * В примере 1.2:
 * При создании объектов, мы делаем следующее:
 *  1) объявляем ("mybox1", "mybox2")
 *  2) выделяем память ("=")
 *  3) инициализируем объекты типа Вох ("new Box()")
 *     а точнее его конструктор.
 *
 * Результат выполнения программы:
 * Объем равен 1000.0
 * Объем равен 1000.0
 *
 * Оба объекта:
 *  -  mybox1
 *  -  mybox2
 * инициализированы конструктором Вох() при их создании.
 *
 * 1) Конструктор присваивает всем параллелепипедам
 *    одинаковые размеры 10х10х10,
 *    поэтому объекты:
 *      -  mybox1
 *      -  mybox2
 *    будут иметь одинаковый объем.
 *
 * 2) Вызов метода println() в конструкторе Вох()
 *    делается исключительно ради иллюстрации.
 *
 *    Большинство конструкторов не выводят никаких данных,
 *    а лишь выполняют инициализацию объекта.
 *
 * Рассмотрение операции "new":
 *
 *    1) При ВЫДЕЛЕНИИ ПАМЯТИ для объекта
 *       используется следующая форма:
 *          переменная_класса = new имя_класса();
 *
 *    2) После имени класса требуется указывать круглые скобки.
 *
 *    3) В действительности операция "new" вызывает конструктор класса.
 *
 *    4) В строке кода:
 *          "Вох mybox1 = new Вох();"
 *       а) операция
 *              "new Вох()"
 *       б) вызывает конструктор
 *              "Вох()"
 *
 * 3) Если конструктор класса не определен явно,
 *    то в Java для класса создается конструктор по умолчанию.
 *
 *    Поэтому приведенная выше строка кода
 *      "Вох mybox1 = new Вох();"
 *    была вполне работоспособной
 *    в предыдущих версиях класса Вох,
 *    где конструктор не был определен.
 *
 * 4) Конструктор по умолчанию инициализирует
 *    все переменные экземпляра устанавливаемыми
 *    по умолчанию значениями, которые могут быть:
 *     - нулевыми             -> для числовых типов
 *     - пустыми (null)       -> для ссылочных типов
 *     - логическими (false)  -> для логических (boolean) типов
 *
 * 5) Зачастую конструктора по умолчанию оказывается
 *    достаточно для простых классов,
 *    чего нельзя сказать о более сложных классах.
 *
 * 6) Если в классе будет ОПРЕДЕЛЕН СОБСТВЕННЫЙ конструктор,
 *    конструктор ПО УМОЛЧАНИЮ больше НЕ ИСПОЛЬЗУЕТСЯ.
 */
class Box {

    // Пример 1.1:
    double width;
    double height;
    double depth;

    // Инициализация конструктора класса Box
    public Box() {
        System.out.println("Конструирование объекта Box");
        width = 10;
        height = 10;
        depth = 10;
    }

    // Рассчитать и возвратить объем
    double volume() {
        return width * height * depth;
    }
}

public class BoxDemo6 {
    public static void main(String[] args) {

        // Пример 1.2:
        Box mybox1 = new Box();
        Box mybox2 = new Box();

        double vol;

        // Получить объем 1-го параллелепипеда
        vol = mybox1.volume();
        System.out.println("Объем равен " + vol);

        // Получить объем 2-го параллелепипеда
        vol = mybox2.volume();
        System.out.println("Объем равен " + vol);
    }
}