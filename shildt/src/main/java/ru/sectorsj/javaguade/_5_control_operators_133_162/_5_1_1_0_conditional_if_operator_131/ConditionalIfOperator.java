package ru.sectorsj.book.shild.javaguade._5_control_operators_133_162._5_1_1_0_conditional_if_operator_131;

/**
 * 5.1.1.0 - Условный оператор if (₀, ₁, ₂, ₃, ₄, ₅, ₆, ₇, ₈, ₉)
 *
 * if - это оператор условного ветвления программы на Java.
 *
 * 1) С его помощью можно направить
 *    выполнение программы по двум разным ветвям.
 *
 *    Общая форма:
 *         if (условие) оператор₁;
 *         else оператор₂;
 *
 *    Здесь каждый оператор обозначает:
 *     - одиночный оператор
 *     - составной оператор
 *    заключенный в фигурные скобки (т.е. блок кода).
 * Параметры:
 * 1) условие - любое выражение,
 *               возвращающее логическое значение
 *               типа boolean.
 * 2) if      - условный оператор действует
 *              следующим образом:
 *              а) если условие истинно,
 *                 выполняется оператор₁,
 *              б) иначе - оператор₂,
 *                 если таковой имеется.
 *              в) ни в коем случае
 *                 не будут выполняться оба оператор.
 * 3) else    - оператор указывать необязательно.
 *
 *    Пример 1:
 *
 *    int a, b;
 *    // ...
 *    if (a < b) a = 0;
 *    else b = 0;
 *
 * 1) Если значение переменной "a" меньше значения переменной "b",
 *    а) то нулевое значение устанавливается в переменной "a",
 *    б) иначе - в переменной "b".
 *    в) но ни в коем случае нулевое значение
 *       не может быть установлено сразу в обеих переменных, a и b.
 *
 * 2) Чаще всего в выражениях, управляющих выполнением оператора if,
 *    применяются операции отношения,
 *    хотя это не обязательно.
 *
 * 3) Для управления условным оператором if
 *    можно применять и одиночную переменную типа boolean
 *
 *    Пример 2:
 *
 *    boolean dataAvailable;
 *    //...
 *    if (dataAvailable)
 *       processData();
 *    else
 *       waitForMoreData();
 *
 * 4) после ключевого слов:
 *      - if
 *      - else
 *    допускается указывать только один оператор.
 *
 * 5) если требуется ввести больше операторов,
 *    то придется написать код так,
 *    как показано в приведенном примере 3,
 *    где оба оператора находятся в блоке кода.
 *
 *    Они будут выполняться в том случае,
 *    если значение переменной bytesAvailable
 *    окажется больше нуля.
 *
 *    Пример 3:
 *
 *    int bytesAvailable;
 *    //...
 *    if(bytesAvailable > 0) {
 *        ProcessData();
 *        bytesAvailable -= n;
 *    } else
 *       waitForMoreData();
 *
 * 6) Иногда в условном операторе if
 *    предпочитают использовать фигурные скобки
 *    даже при наличии только одного оператора в каждом выражении.
 *
 *    а) это упрощает добавление операторов в дальнейшем
 *       и избавляет от необходимости
 *       проверять наличие фигурных скобок.
 *
 *    б) пропуск определения блока в тех случаях,
 *       когда он действительно требуется,
 *       относится к числу распространенных ошибок.
 *
 *    Пример 4:
 *
 *    // Не верно
 *    int bytesAvailable;
 *    //...
 *    if(bytesAvailable > 0) {
 *        ProcessData();
 *        bytesAvailable -= n;
 *    } else
 *        waitForMoreData();
 *        bytesAvailable = n;
 *
 * 7) Если судить по величине отступа,
 *    то в примере 4, кода изначально предполагалось:
 *    а) оператор bytesAvailable = n;
 *    должен выполняться в ветви оператора else.
 *    б) но не следует забывать,
 *       что в Java отступы не имеют никакого значения,
 *       а компилятору никоим образом
 *       не известны намерения программиста.
 *    в) код будет скомпилирован без вывода
 *       каких-нибудь предупреждающих сообщений,
 *       но во время выполнения он будет вести себя не так,
 *       как предполагалось.
 *
 *    В примере 5 будет исправлена ошибка,
 *    допущенная в предыдущем примере.
 *
 *    Пример 5:
 *    // Верно
 *
 *    int bytesAvailable;
 *    //...
 *    if(bytesAvailable > 0) {
 *        ProcessData();
 *        bytesAvailable -= n;
 *    } else {
 *       waitForMoreData();
 *       bytesAvailable = n;
 *    }
 *
 * 8) Если оператор
 *      - ProcessData()
 *    один, то "{}" можно не писать
 *
 * 9) Если операторов:
 *      - ProcessData(),
 *      - bytesAvailable -= n
 *    больше чем 1,
 * то их нужно писать в блоке кода - {}
 */
public class ConditionalIfOperator {
}
