package ru.sectorsj.book.shild.javaguade._5_control_operators_133_162._5_3_1_4_break_as_goto_form_158;

/**
 * 5.1.3.4 - Применение оператора break
 *           в качестве формы оператора goto.
 *
 * Оператор break может применяться:
 * - в операторах switch
 * - в циклах
 * - самостоятельно в качестве "цивилизованной" формы оператора
 *   безусловного перехода goto.
 *
 * 1) В языке Java оператор goto отсутствует,
 *    поскольку он позволяет выполнять ветвление программ:
 *    - произвольным
 *    - неструктурированным
 *    образом.
 *
 * 2) Код, который управляется оператором goto,
 *    труден для понимания и сопровождения.
 *
 * 3) Оператор goto исключает возможность
 *    оптимизировать код для определенного компилятора.
 *
 * 4) В некоторых случаях оператор goto,
 *    оказывается удобным и вполне допустимым средством
 *    для управления потоком исполнения команд.
 *
 * 5) Оператор goto может оказаться полезным при
 *    выходе из ряда глубоко вложенных циклов.
 *
 * 6) Для подобных случаев в Java
 *    определена расширенная форма оператора break.
 *
 *    Используя эту форму, можно организовать выход
 *    из одного или нескольких блоков кода.
 *
 *    Они совсем не обязательно должны
 *    быть частью цикла или оператора switch,
 *    но могут быть любыми блоками кода.
 *
 * 7) Можно точно указать оператор,
 *    из которого будет продолжено выполнение программы,
 *    поскольку данная форма оператора break наделена метками.
 *
 * 8) Оператор break с меткой
 *    предоставляет все преимущества оператора goto,
 *    не порождая присущие ему недостатки.
 *
 * Общая форма оператора break с меткой:
 * break метка;
 *
 * Метка - это имя метки, обозначающее блок кода:
 *         - самостоятельный блок кода,
 *         - целевой блок другого оператора.
 *
 * 9) При выполнении этой формы оператора break
 *    управление передается блоку кода,
 *    помеченному меткой.
 *
 *    ВАЖНО!
 *    Такой блок кода должен содержать оператор break,
 *    но он, не обязательно, должен быть
 *    непосредственно объемлющим его блоком.
 *
 * 10) Оператор break с меткой
 *     можно применять для выхода
 *     из ряда вложенных блоков.
 *
 * 11) Оператор break с меткой нельзя использовать
 *     для передачи управления внешнему блоку кода,
 *     который не содержит данный оператор break.
 *
 * 12) Чтобы пометить блок,
 *     достаточно поместить в его начале метку.
 *
 * Метка - это любой допустимый в Java
 *         идентификатор с двоеточием.
 *
 * 1) Как только блок помечен меткой,
 *    её можно использовать в качестве
 *    адресата для оператора break.
 *
 * 2) В итоге выполнение программы
 *    будет продолжено с конца, помеченного блока.
 *
 * Пример 1:
 * Применение оператора break в качестве цивилизованной
 *
 * В примере 1 программа содержит три вложенных блока,
 * каждый из которых помечен отдельной меткой.
 *
 * Результат выполнения программы:
 * Предшествует оператору break.
 * Этот оператор следует за блоком second.
 *
 * Оператор break осуществляет переход
 * в конец блока с меткой second,
 * пропуская два вызова метода println().
 */
public class BreakAsGotoForm {
    public static void main(String[] args) {

        // Пример 1:
        boolean t = true;

        first: {

            second: {

                third: {
                    System.out.println("Предшествует оператору break.");

                    // выход из блока second
                    if (t) break second;
                        System.out.println("Этот оператор не будет выполнен");
                }

                System.out.println("Этот оператор не будет выполнен");
            }

            System.out.println("Этот оператор следует за блоком second. ");
        }
    }
}