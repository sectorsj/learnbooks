package ru.sectorsj.book.shild.javaguade._5_control_operators_133_162._5_3_2_1_continue_label_160;


/**
 * 5.3.2.1 - Метки в операторе continue.
 *
 * Как и оператор break,
 * оператор continue может содержать
 * метку объемлющего цикла,
 * который требуется продолжить.
 *
 * Пример 1:
 * Применение оператора continue с меткой.
 *
 * В примере 1 оператор continue применяется
 * для вывода треугольной таблицы умножения чисел от О до 9.
 *
 * Результат выполнения программы:
 * 0                                     - тут срабатывает continue обрывая вложенный цикл и начинается внешний цикл outer
 * 0  1                                  - тут тоже срабатывает continue
 * 0  2   4                              - и тут continue
 * 0  3   6   9                          - и тут continue
 * 0  4   8  12  16                      - и тут continue
 * 0  5  10  15  20  25                  - и тут continue
 * 0  6  12  18  24  30  36              - и тут continue
 * 0  7  14  21  28  35  42  49          - и тут continue
 * 0  8  16  24  32  40  48  56  64      - и тут continue
 * 0  9  18  27  36  45  54  63  72  81  - циклы завершаются
 *
 * Оператор continue прерывает цикл подсчета значений
 * переменной "j" и продолжает его со следующего шага цикла,
 * в котором подсчитываются значения переменной i.
 *
 * Редко встречаются удачные примеры
 * применения оператора continue.
 *
 * Т.к. в Java предлагается широкий выбор операторов цикла,
 * удовлетворяющих требованиям большинства приложений.
 *
 * Когда требуется более раннее начало нового шага цикла,
 * оператор continue предоставляет
 * структурированный способ решения подобной задачи.
 */
public class ContinueLabel {
    public static void main(String[] args) {

        // Пример 1:
        outer: for (int i = 0; i < 10; i++) {

            for (int j = 0; j < 10; j++) {

                if(j > i) {
                    System.out.println();
                    continue outer;
                }

                System.out.print(" " + (i * j));
            }
        }

        System.out.println();
    }
}