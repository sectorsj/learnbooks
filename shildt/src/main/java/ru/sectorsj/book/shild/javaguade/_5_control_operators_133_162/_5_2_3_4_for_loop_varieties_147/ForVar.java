package ru.sectorsj.book.shild.javaguade._5_control_operators_133_162._5_2_3_4_for_loop_varieties_147;

/**
 * 5.2.3.4 - Разновидности цикла For
 *
 * У оператора цикла for имеется несколько разновидностей,
 * расширяющих возможности его применения.
 *
 * Гибкость этого цикла объясняется тем,
 * что три его части:
 *  1) инициализация
 *  2) проверка условий
 *  3) итерация
 * совсем не обязательно использовать
 * только по прямому назначению.
 *
 * Каждую часть оператора цикла for
 * можно применять в любых требующихся целях.
 *
 * В цикле for предполагается
 * употребление условного выражения.
 *
 * Пример 1:
 * Условием, управляющим циклом for,
 * может быть любое логическое выражение.
 *
 * boolean done = false;
 *
 * for(int i = 1; !done; i++) {
 *     // ...
 *     if (interrupted()) done = true;
 * }
 *
 * 1) В этом выражении совсем не обязательно сравнивать
 *    переменную управления циклом
 *    с некоторым целевым значением.
 *
 * 2) Выполнение цикла for
 *    продолжается до тех пор,
 *    пока в переменной "done"
 *    не установится логическое значение true.
 *
 * 3) В этой разновидности цикла for
 *    не выполняется проверка значения
 *    в переменной i управления циклом.
 *
 *
 *  Пример 2:
 *  В операторе цикла for может отсутствовать выражение:
 *  - инициализации
 *  - итерации
 *  - инициализации и итерации
 *
 * 1) инициализирующее и итерационное выражения
 *    вынесены за пределы цикла for.
 *    В итоге соответствующие части
 *    оператора цикла for оказываются пустыми.
 *
 * 2) Этот очень простой пример демонстрирует
 *    далеко не самый изящный стиль программирования,
 *    но иногда такой подход имеет смысл, если:
 *    а) начальное условие определяется
 *       сложным выражением где-то в другом месте программы
 *    б) значение переменной управления циклом
 *       изменяется случайным образом в зависимости от действий,
 *       выполняемых в теле цикла
 *    То эти части оператора цикла for
 *    имеет смысл оставить пустыми.
 *
 * Пример 3:
 * Оставляя все 3 части оператора пустыми,
 * можно умышленно создать бесконечный цикл,
 * Бесконечный цикл - цикл, который никогда не завершается.
 *
 * for ( ; ; ) {
 *     // ...
 * }
 *
 *
 * 1) Этот цикл может выполняться бесконечно,
 *    поскольку отсутствует условие,
 *    по которому он мог бы завершиться.
 *
 * 2) Если в некоторых программах
 *    вроде командного процессора операционной системы
 *    требуется наличие бесконечного цикла,
 *    то в большинстве случаев "бесконечные" циклы
 *    на самом деле являются лишь циклами с особыми условиями прерывания.
 *
 * ВАЖНО!
 * Существует способ прервать цикл (даже бесконечный),
 * не требующий указывать обычное условное выражение в цикле.
 */
public class ForVar {
    public static void main(String[] args) {

        // Пример 1:
        int i;
        boolean done = false;

        i = 0;
        for( ; !done; ) {
            System.out.println("i равно " + i);
            if (i ==10) done = true;
            i++;
        }
    }
}