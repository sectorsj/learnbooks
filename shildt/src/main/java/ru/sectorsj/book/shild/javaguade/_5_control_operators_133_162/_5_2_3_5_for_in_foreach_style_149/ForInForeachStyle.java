package ru.sectorsj.book.shild.javaguade._5_control_operators_133_162._5_2_3_5_for_in_foreach_style_149;

/**
 * 5.2.3.5 - Разновидность цикла for в стиле for each
 *
 * В языке Java можно использовать 2 форму цикла for,
 * реализующую цикл в стиле foreach.
 *
 * В современной теории языков программирования
 * все большее применение находит
 * понятие циклов в стиле for each,
 * которые постепенно становятся
 * стандартными средствами
 * во многих языках программирования.
 *
 * Цикл в стиле foreach - предназначен для строго последовательного
 *                        выполнения повторяющихся действий
 *                        над коллекцией объектов вроде массива.
 *
 * В отличие от некоторых языков, подобных С#,
 * где для реализации циклов в стиле foreach
 * используется ключевое слово foreach,
 * в Java возможность организации такого цикла
 * реализована путем усовершенствования цикла for.
 *
 * Преимущество такого подхода состоит в том,
 * что для его реализации не требуется
 * дополнительное ключевое слово,
 * а уже существующий код не нарушается.
 *
 * Цикл for в стиле foreach также
 * называется усовершенствованным циклом for.
 *
 * Общая форма цикла for в стиле foreach:
 *
 * for(тип итерационная_переменная : коллекция) блок_операторов
 *
 * Параметры:
 * 1) Тип                     - конкретный тип данных;
 * 2) Итерационная_переменная - имя итерационной переменной,
 *                              которая последовательно
 *                              принимает значения из коллекции
 *                              (от первого и до последнего)
 * 3) Коллекция               - перебираемая в цикле коллекция.
 *
 * ВАЖНО!
 * В цикле for можно перебирать разные типы коллекций.
 * В данной главе будут использоваться только массивы.
 * Другие типы коллекций,
 * которые можно перебирать в цикле for,
 * в том числе Collection FrameWork,
 * рассматриваются в последующих главах книги.
 *
 * 1) На каждом шаге цикла из коллекции извлекается очередной элемент,
 *    который сохраняется в указанной "итерационной_переменной".
 *
 * 2) Цикл выполняется до тех пор,
 *    пока не будут извлечены все элементы
 *    из коллекции.
 *
 * 2) "Итерационная_переменная"
 *    получает значения из коллекции, поэтому указанный "тип"
 *    должен совпадать с типом элементов хранящихся в коллекции,
 *    или быть с ним совместимым.
 *
 *    При переборе массива указанный тип
 *    должен быть совместим с типом
 *    элемента массива.
 *
 *
 * Для чего применять цикл FOR в стиле foreach:
 *
 * 1) Применение разновидности цикла for,
 *    для которой предназначен стиль foreach.
 *
 * Задача:
 * Вычисления суммы значений элементов массива
 *
 * Пример 1:
 * Использование классического цикла for:
 *
 * int nums[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
 * int sum = 0;
 * for(int i = 0; i < 10; i++) sum += nums[i];
 *
 * Описание:
 * 1) Значения каждого элемента последовательно
 *    извлекаются из массива "nums".
 *
 * 2) Чтение всего массива выполняется
 *    в строгой последовательности.
 *
 * 3) Индексации массива "nums" выполняется вручную
 *    по переменной управления циклом - "i".
 *
 * Пример 2:
 * Использование разновидности цикла for в стиле foreach:
 *
 * int nums[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
 * int sum = 0;
 *
 * for(int х: nums) sum += х;
 *
 * Описание:
 * 1) Автоматизирует процесс извлечения элементов массива.
 *
 * 2) Можно не устанавливать значение счетчика цикла:
 *    а) указывать его начальное значения
 *    б) указывать его конечное значения
 *    в) индексировать массив вручную
 *
 * 3) Цикл выполняется автоматически по всему массиву,
 *    последовательно получая значения
 *    каждого его элементов:
 *    - от первого
 *    - до последнего
 *
 * 4) На каждом шаге цикла переменной "x"
 *    автоматически присваивается значение
 *    следующего элемента массива nums.
 *
 * Шаги цикла for в стиле foreach:
 * 1 шаг - переменная "x" содержит значение "1"
 * 2 шаг - значение "2"
 * и т.д.
 *
 * ВАЖНО!!
 * Такая разновидность цикла for
 * не только упрощает синтаксис,
 * но и исключает возможность ошибок,
 * связанных с выходом за пределы массива.
 */
public class ForInForeachStyle {


}
