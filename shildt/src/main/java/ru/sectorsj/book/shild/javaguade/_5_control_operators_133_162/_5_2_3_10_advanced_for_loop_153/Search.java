package ru.sectorsj.book.shild.javaguade._5_control_operators_133_162._5_2_3_10_advanced_for_loop_153;

import java.io.IOException;


/**
 *  5.2.3.10 - Применение усовершенствованного цикла for
 *
 * Каждый оператор цикла for в стиле foreach
 * позволяет перебирать элементы массива только по очереди:
 * - начиная с первого
 * - оканчивая последним.
 * Это может показаться ограничением.
 * Однако это не так.
 *
 * Перебор элементов массива по очереди
 * требуется во многих алгоритмах.
 *
 * К алгоритмам, которым применение
 * циклов в стиле foreach
 * дает заметные преимущества, относятся:
 * - алгоритм поиска
 * - вычисление среднего значения
 * - отыскание минимального или максимального значения во множестве,
 * - поиск дубликатов
 * - и т.п.
 *
 * Пример 1:
 * Поиск значения в неупорядоченном массиве.
 * Поиск прекращается после обнаружения искомого значения.
 *
 * Результат выполнения программы:
 * Значение 5 найдено!
 *
 *
 * 1) В примере 1 выбор стиля foreach
 *    для организации цикла for полностью оправдан,
 *    поскольку поиск в неупорядоченном массиве
 *    предполагает последовательный просмотр каждого элемента.
 *
 * 2) Если массив будет упорядоченным,
 *    можно применить двоичный поиск,
 *    реализация которого требует
 *    применения другой разновидности цикла.
 *
 * ВАЖНО!
 * Цикл for в стиле foreach
 * одинаково удобен при обращении с коллекциями,
 * определенными в каркасе Collections Framework (часть 2).
 *
 * ВАЖНО!!
 * В более общем случае оператор цикла for
 * позволяет перебирать элементы любой коллекции объектов,
 * если эта коллекция удовлетворяет ряду ограничений (глава 19)
 */
public class Search {
    public static void main(String[] args) throws IOException {

        // Пример 1:
        int nums[] = {6, 8, 3, 7, 5, 6, 1, 4, 54};
        int val = 5;
        boolean found = false;

        //поиск значения переменной val в массиве nums
        for (int x : nums) {
            if (x == val) {
                found = true;
                break;
            }
        }

        if (found)
            System.out.println("Значение " + val + " найдено!");
    }
}