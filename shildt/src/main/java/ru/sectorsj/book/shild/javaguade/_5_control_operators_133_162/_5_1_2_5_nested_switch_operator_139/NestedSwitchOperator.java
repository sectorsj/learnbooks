package ru.sectorsj.book.shild.javaguade._5_control_operators_133_162._5_1_2_5_nested_switch_operator_139;

/**
 * 5.1.2.5 - Вложенные операторы switch
 *
 * вложенный switch - оператор switch используемый
 *                    в последовательности операторов
 *                    внешнего оператора switch.
 *
 * В каждом операторе switch
 * определяется свой блок кода,
 * и поэтому никаких конфликтов
 * между константами в ветвях выбора case:
 * - внутреннего оператора
 * - внешнего оператора
 * switch не возникает.
 *
 * Пример 1:
 *
 * // switch - внешний:
 * switch (count) {
 *     case 1:
 *         // switch - вложенный:
 *         switch(target) {
 *             case О:
 *                System.out.println("target равно 0");
 *                break;
 *             // конфликты с внешним оператором switch отсутствуют
 *             case 1:
 *                System.out.println("target равно 1");
 *                break;
 *         }
 *         break;
 *     case 2: // ...
 *
 * В данном случае оператор ветви выбора "case1:"
 * из внутреннего оператора switch
 * не вступает в конфликт
 * с оператором ветви выбора "case1:"
 * из внешнего оператора switch.
 *
 * Значение переменной "count"
 * сравнивается только с рядом
 * внешних ветвей выбора case.
 *
 * Если значение переменной "count" равно 1,
 * то значение переменной "target"
 * сравнивается с рядом внутренних ветвей выбора case.
 *
 * Можно выделить следующие особенности оператора switch:
 *
 * 1) Оператор switch отличается от
 *    условного оператора if тем,
 *    а) в switch допускается выполнять проверку
 *       только на равенство.
 *       В операторе switch обнаруживается
 *       совпадение выражения с константой
 *       только в одной из ветвей case.
 *    б) в условном операторе if можно вычислять результат
 *       логического выражения любого типа.
 *
 * 2) Константы ни в одной из двух ветвей case
 *    того же самого оператора switch
 *    не могут иметь одинаковые значения.
 *
 *    Внутренний оператор switch
 *    и содержащий его внешний оператор switch
 *    могут иметь одинаковые константы в ветвях case.
 *
 * 3) Оператор switch действует эффективнее
 *    ряда вложенных условных операторов if.
 *
 * ВАЖНО!
 * Особенность эффективной работы switch
 * позволяет лучше понять принцип
 * действия компилятора Java.
 *
 * 4) Анализируя оператор switch,
 *    компилятор Java будет проверять константу
 *    в каждой ветви выбора case
 *    и создавать "таблицу переходов",
 *    чтобы использовать ее
 *    для выбора ветви программы
 *    в зависимости от получаемого значения выражения.
 *
 * 5) Когда требуется делать выбор
 *    среди большой группы значений,
 *    оператор switch будет выполняться значительно быстрее
 *    последовательности операторов if-else:
 *    а) компилятору известно,
 *       что константы во всех ветвях выбора case
 *       имеют один и тот же тип,
 *       и их достаточно проверить
 *       на равенство значению выражения switch.
 *    б) компилятор не располагает
 *       подобными сведениями
 *       о длинном перечне выражений
 *       условного оператора if.
 */
public class NestedSwitchOperator {
}