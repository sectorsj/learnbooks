package ru.sectorsj.book.shild.javaguade._7_classes_and_methods_details._7_6_1_2_access_control_for_stack_201;


/**
 * 7.6.1.2 - Организация управления доступом
 *           на усовершенствованной версию класса Stack
 *           (главе 6, стр. 184)
 *
 * Пример 1.1, 1.2:
 * Определяется целочисленный стек,
 * который может содержать 10 значений.
 *
 * Переменные stck и tos будут закрытыми (private).
 *
 * Это означает что они не могут быть случайно
 * или намеренно изменены так, чтобы нарушить стек.
 *
 *  1) stck - содержит стек
 *  2) tos  - содержит индекс вершины стека
 *
 * 1) Обращение к этим переменным
 *               или
 * 2) Изменение этих переменных
 * может осуществляться только через методы:
 *  - push()
 *  - рор()
 *
 * 1) Объявление закрытой переменной
 *     "tos"
 *    препятствует случайной установке
 *    ее значения за границами массива
 *     "stck"
 *    из других частей программы.
 *
 * 2) Методы будут обеспечивать доступ к данным,
 *    которые определены в классе, хотя это и необязательно.
 *
 * 3) Переменная экземпляра может быть и открытой,
 *    если на то имеются веские основания.
 *
 * ВАЖНО!
 * Ради простоты, в приводимых примерах,
 * переменные экземпляра,
 * в большинстве несложных классов,
 * определены как открытые.
 *
 * Однако в большинстве классов,
 * применяемых в реальных программах,
 * манипулирование данными должно осуществляться
 * только с помощью методов.
 *
 * ВАЖНО!!
 * Управление доступом особенно важно при наследовании.
 */

// Пример 1.1:
class Stack {

    private int stck[] = new int[10];
    private int tos;
    private int overflow;
    private int empty;

    // Инициализация вершины стека
    Stack() {
        tos = -1;
    }

    // Размещение элементы в стеке
    void push(int item) {
        overflow = stck.length;
        if (tos == overflow) {
            System.out.println("Стек заполнен.");
        }
        else {
            stck[++tos] = item;
        }
    }

    // Извлечение элементов из стека
    int pop() {
        empty = 0;
        if(tos < empty) {
            System.out.println("Стек не загружен (пуст)");
            return 0;
        }
        else {
            return stck[tos--];
        }
    }
}

// Пример 1.2:
class TestStack {
    public static void main(String[] args) {
        Stack myStack1 = new Stack();
        Stack myStack2 = new Stack();

        // Размещение чисел в стеке
        for (int i = 0; i < 10; i++) myStack1.push(i);
        for (int i = 10; i < 20; i++) myStack2.push(i);

        // Извлечение этих чисел из стека
        System.out.println("Стек в myStack1: ");
        for (int i = 0; i < 10; i++) {
            System.out.println(myStack1.pop());
        }

        System.out.println("Стек в myStack2: ");
        for (int i = 0; i < 10; i++) {
            System.out.println(myStack2.pop());
        }

        // эти операторы недопустимы
        // myStack1.tos = -2;
        // myStack2.stck[3] = 100
    }
}