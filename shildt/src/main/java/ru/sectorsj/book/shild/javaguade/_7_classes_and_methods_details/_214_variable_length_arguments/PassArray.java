package ru.sectorsj.book.shild.javaguade._7_classes_and_methods_details._214_variable_length_arguments;


/**
 * АРГУМЕНТЫ ПЕРЕМЕННОЙ ДЛИНЫ
 *
 * В версии JDK 5 было внедрено новое языковое средство,
 * упрощающее создание методов, принимающих переменное количество аргументов.
 *
 * Оно получило название:
 * varargs (variable-length arguments - аргументы переменной длины).
 *
 * Метод, который принимает переменное количество аргументов,
 * называется методом с аргументами переменной длины.
 *
 * Ситуации, когда методу требуется передать переменное количество аргументов,
 * встречаются в программировании не так уж редко.
 *
 * Пример 1: Метод, устанавливающий
 *           соединение с Интернетом, может принимать:
 *           - имя пользователя,
 *           - пароль,
 *           - имя файла,
 *           - сетевой протокол
 *           - и прочие данные,
 *           но в то же время он может выбирать значения, задаваемые по умолчанию,
 *           если какие-нибудь из этих данных опущены.
 *
 * Важно! Было бы удобнее передать только те аргументы,
 *        для которых неприменимы значения, задаваемые по умолчанию.
 *
 * Пример 2: Метод, printf() (глава 20),
 *           входящий в состав библиотеки ввода-вывода в Java.
 *           Этот метод принимает переменное количество аргументов,
 *           которые форматируются, а затем выводятся.
 *
 * До версии J2SE 5 обработка аргументов
 * переменной длины могла выполняться 2-мя способами,
 * ни один из которых не был особенно удобным.
 *
 * 1) Если максимальное количество аргументов было небольшим и известным,
 *    можно было создавать перегружаемые варианты метода,
 *    по одному для каждого из возможных способов вызова метода.
 *
 *    И хотя такой способ вполне работоспособен,
 *    он пригоден только в редких случаях.
 *
 * 2) Когда максимальное количество возможных аргументов
 *    было большим или неизвестным,
 *    аргументы сначала размещаются в массиве,
 *    а затем массив передаются методу.
 *
 *    В данном примере демонстрируется 2-й подход:
 *    Использовать массив для передачи методу переменного
 *    количества аргументов.
 *    ВАЖНО!!
 *    Это старый подход к обработке аргументов переменной длины
 */
class PassArray {
    static void vaTest(int[] v) {
        System.out.print("Количество аргументов: " + v.length + " Содержимое: ");

        for (int i : v) {
            System.out.print(i + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Внимание! на порядок создания массива
        // для хранения аргументов
        int[] n1 = { 10 };
        int[] n2 = { 1, 2, 3 };
        int[] n3 = { };
        vaTest(n1); // 1 аргумент
        vaTest(n2); // 3 аргумента
        vaTest(n3); // без аргументов
    }

    /*
     * Программа выводит следующий результат:
     *
     * Количество аргументов: 1 Содержимое: 10
     * Количество аргументов: 3 Содержимое: 1 2 3
     * Количество аргументов: 0 Содержимое:
     *
     * Здесь аргументы передаются методу vaTest() через массив v.
     *
     * Этот старый подход к обработке аргументов
     * переменной длины позволяет методу vaTest()
     * принимать любое количество аргументов.
     *
     * Но он требует, чтобы эти аргументы были вручную
     * размещены в массиве до вызова метода vaTest().
     *
     * Создание массива при каждом вызове метода vaTest()
     * - задача не только трудоемкая, но и чревата ошибками.
     *
     * Методы с аргументами переменной длины
     * обеспечивают более простой и эффективный подход
     * к обработке таких аргументов.
     */
}
