package ru.sectorsj.book.shild.javaguade._7_classes_and_methods_details._7_6_1_1_open_closed_accesses_200;


/**
 * 7.6.1.1 - Влияние организации открытого и закрытого доступа
 *
 * Организация влияния:
 *  - открытого доступа
 *  - закрытого доступа
 *
 * Пример 1.1, 1.2:
 * Отличие модификаторов public и private.
 *
 * Программа выводит следующий результат:
 * a, b и c: 10 20 100
 *
 * В классе Test применяется режим доступа,
 * выбираемый по умолчанию,
 * что в данном примере равносильно
 * указанию модификатора доступа public.
 *
 * Член "b" данного класса
 * явно указан как public (открытый),
 * тогда как член "с"
 * указан как private (закрытый).
 *
 * член "с" недоступен из кода за пределами своего класса.
 *
 * Поэтому в самом классе AccessTest член "с"
 * не может применяться непосредственно.
 *
 * Доступ к нему должен осуществляться с помощью
 * открытых методов данного класса:
 * - setC()
 * - getC()
 *
 * Если удалить символы комментария
 * в начале следующей строки кода:
 * // оb.с = 100;   // ОШИБКА!
 *
 * вызовет невозможность компиляции примера 1
 * из-за нарушений правил доступа.
 */
class Test {

    // доступ, по умолчанию
    int a;

    // открытый доступ
    public int b;

    // закрытый доступ
    private int c;

    // методы setC, getC для доступа
    // к члену "c" данного класса
    void setC(int i) {
        // Устанавливается значение члена "c" данного класса
        c = i;
    }
    int getC() {

        // Получение значения члена "c" данного класса
        return c;
    }
}

class AccessTest {
    public static void main(String[] args) {
        Test obj = new Test();

        // Эти операторы правильны, поэтому члены a и b
        // данного класса доступны непосредственно
        obj.a = 10;
        obj.b = 20;

        // Этот оператор неверен и может вызвать ошибку
        // obj.c = 100;     // ОШИБКА!

        // Доступ к члену "с" данного класса должен
        // осуществляться с помощью методов его класса
        obj.setC(100);      // ВЕРНО!
        System.out.println("a, b и c: " + obj.a + " "
            + obj.b + " " + obj.getC());
    }
}