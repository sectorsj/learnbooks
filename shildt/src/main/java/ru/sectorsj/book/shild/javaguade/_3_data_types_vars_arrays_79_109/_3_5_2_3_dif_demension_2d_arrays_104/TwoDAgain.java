package ru.sectorsj.book.shild.javaguade._3_data_types_vars_arrays_79_109._3_5_2_3_dif_demension_2d_arrays_104;

/**
 * 3.5.2.3 - Двухмерный массив с разной размерностью
 *
 * При резервировании памяти
 * для отдельных измерений массива вручную
 * совсем не обязательно резервировать
 * одинаковое количество элементов
 * для каждого измерения.
 *
 * Предоставляется полная свобода действий
 * управлять длиной каждого массива,
 * поскольку многомерные массивы
 * на самом деле представляют собой массивы массивов.
 *
 * Пример 4:
 * создание двухмерного массива
 * с разной размерностью 2го измерения:
 *
 * Эта программа выводит следующий результат:
 * 0
 * 1 2
 * 3 4 5
 * 6 7 8 9
 *
 * Созданный в итоге массив показан на рис. 3.2.
 *
 *
 * |--------|
 * | [1][0] |
 * |--------|--------|
 * | [1][0] | [1][1] |
 * |--------|--------|--------|
 * | [2][0] | [2][1] | [2][2] |
 * |--------|--------|--------|--------|
 * | [3][0] | [3][1] | [3][2] | [3][3] |
 * |--------|--------|--------|--------|
 * рис.3.2 Двумерный массив с разной
 *         размерностью 2го измерения
 *
 * Применение неоднородных (нерегулярных) массивов
 * может быть неприемлемо во многих приложениях.
 *
 * 1) их поведение отличается от
 *    обычного поведения многомерных массивов.
 * 2) в некоторых случаях нерегулярные массивы
 *    могут оказаться весьма эффективными.
 *
 * Нерегулярный массив
 * может быть идеальным решением:
 * 1) если требуется очень большой
 *    двухмерный разреженный массив.
 *    Т.е. массив, в котором будут
 *    использоваться не все элементы.
 */
class TwoDAgain{
    public static void main(String[] args) {

        // Пример 4:
        int twoD[][] = new int[4][];
        twoD[0] = new int[1];
        twoD[1] = new int[2];
        twoD[2] = new int[3];
        twoD[3] = new int[4];
        int i, j, k = 0;

        for (i = 0; i < 4; i++)
            for (j = 0; j < i + 1; j++) {
                twoD[i][j] = k;
                k++;
            }
        for (i = 0; i < 4; i++) {
            for (j = 0; j < i +1; j++)
                System.out.print(twoD[i][j] + " ");
            System.out.println();
        }
    }
}