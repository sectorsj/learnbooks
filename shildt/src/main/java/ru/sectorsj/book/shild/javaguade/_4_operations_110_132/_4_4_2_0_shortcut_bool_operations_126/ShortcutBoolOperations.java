package ru.sectorsj.book.shild.javaguade._4_operations_110_132._4_4_2_0_shortcut_bool_operations_126;

/**
 * 4.4.2.0 - Укороченные логические операции
 *
 * В языке Java предоставляются
 * 2 любопытные логические операции,
 * отсутствующие во многих других ЯП.
 *
 * Эти 2‑е версии логических операций:
 *  - И
 *  - ИЛИ
 * обычно называются укороченными логическими операциями.
 *
 * Таблица 4.6 Результаты выполнения логических операций.
 * |    A    |    B    |   A|B   |   A&B   |   A^B   |   !A    |
 * |_________|_________|_________|_________|_________|_________|
 * |  false  |  false  |  false  |  false  |  false  |  true   |
 * |  true   |  false  |  true   |  false  |  true   |  false  |
 * |  false  |  true   |  true   |  false  |  true   |  true   |
 * |  true   |  true   |  true   |  true   |  false  |  false  |
 *
 * Как следует из табл. 4.6,
 * результат выполнения укороченной логической операции:
 * 1) Если значение операнда "A" равно true,
 *    независимо от значения операнда "B".
 *    "ИЛИ" равен true,
 *
 * 2) Если значение операнда "A" равно false,
 *    независимо от значения операнда "B".
 *    "И" равен false,
 *
 * 3) При использовании форм:
 *       - ||
 *       - &&
 *      этих операторов,
 *      вместо форм:
 *       - |
 *       - &
 *    в программе на Java не будет
 *    вычисляться значение правого операнда.
 *
 * 4) Если результат выражения
 *    можно определить по значению
 *    только левого операнда.
 *
 * 5) Этим очень удобно пользоваться,
 *    когда значение правого операнда
 *    зависит от значения левого.
 *
 * Пример 1:
 * применения укороченных логических операций,
 * для выяснения достоверность операции деления
 * перед вычислением ее результата.
 *
 * if (denom != О && num / denom > 10)
 *
 * Благодаря применению укороченной формы
 * логической операции И (&&)
 * отсутствует риск возникновения исключений
 * во время выполнения
 * в связи с равенством "0" знаменателя (denom).
 *
 * Если бы был указан одинарный знак &
 * логической операции И,
 * то вычислялись бы обе части выражения,
 * что привело бы к исключению
 * во время выполнения в связи с тем,
 * что значение переменной denom равно "0".
 *
 * Укороченные формы логических операций для:
 *  - И   (&&) - логических операций
 *  - ИЛИ (||) - логических операций
 *  - И    (&) - поразрядных операций
 *  - ИЛИ  (|) - поразрядных операций
 *
 * Но из этого правила есть исключения.
 *
 * Пример 2:
 *
 * одиночный знак & гарантирует
 * выполнение операции инкремента
 * над значением переменной "e",
 * независимо от того,
 * равно ли "1" значение переменной "c".
 *
 * if (c == 1 & e++ < 100) d = 100;
 *
 * ВАЖНО!
 * В формальной спецификации языка Java
 * укороченные логические операции называются условными:
 * а) условная логическая операция И
 * б) условная логическая операция ИЛИ
 * в) и тд.
 */
public class ShortcutBoolOperations {
}
