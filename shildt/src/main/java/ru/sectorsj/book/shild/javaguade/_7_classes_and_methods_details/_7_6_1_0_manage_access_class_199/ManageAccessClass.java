package ru.sectorsj.book.shild.javaguade._7_classes_and_methods_details._7_6_1_0_manage_access_class_199;

/**
 * 7.6.1.0 - УПРАВЛЕНИЕ ДОСТУПОМ К ОТДЕЛЬНОМУ КЛАССУ
 *
 * В языке Java определяются следующие модификаторы доступа:
 * 1) открытый (public);
 * 2) закрытый (private);
 * 3) защищенный (protected);
 * 4) доступ по умолчанию (без ключевого слова).
 *
 * 1) public              - когда член объявляется с этим модификатором доступа,
 *                          он становится доступным из любого другого кода.
 *
 * 2) private             - когда член класса объявляется с этим модификатором доступа,
 *                          он доступен только другим членам этого же класса.
 *
 * 3) protected           - этот модификатор доступа
 *                          применяется только при наследовании.
 *
 * 4) доступ по умолчанию - при отсутствии модификатора,
 *                          член класса доступен в своем пакете,
 *                          но недоступен для кода,
 *                          находящегося за пределами этого пакета.
 *
 * Теперь становится понятно,
 * почему в объявлении метода main()
 * всегда присутствует модификатор public.
 *
 * Этот метод вызывается из кода,
 * находящегося за пределами данной программы,
 * из исполняющей системы Java.
 *
 * 1) В рассмотренных ранее примерах классов
 *    все члены класса действовали
 *    в режиме доступа "По умолчанию".
 *
 *    Но этот режим доступа зачастую
 *    не соответствует практическим требованиям.
 *
 * 2) Доступ к данным класса приходится ограничивать,
 *    предоставляя доступ к ним только через методы.
 *
 *    В ряде случаев в классе
 *    придется определять и закрытые методы.
 *
 * 3) Модификатор доступа предшествует
 *    остальной спецификации типа члена.
 *
 * 4) Оператор объявления члена
 *    должен начинаться с модификатора доступа.
 *
 * Пример 1:
 * Объявление модификатора доступа.
 */
// Пример 1:
public class ManageAccessClass {
    public int i;
    private double j;
    private int myMethod(int a, char b) {
        // ...
        return a;
    }
}