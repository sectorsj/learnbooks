1.  Присвойте явному параметру имя otherObject.
    Впоследствии его тип нужно будет привести к типу другой переменной под названием other.

2.  Проверьте, одинаковы ли ссылки this и otherObject, следующим образом:
    if (this == otherObject) return true;

3.  Это выражение составлено лишь в целях оптимизации проверки.
    Ведь намного быстрее проверить одинаковость ссылок, чем сравнивать поля объектов.

4.  Выясните, является ли ссылка otherObject пустой (null), как показано ниже.
    Если она оказывается пустой, следует возвратить логическое значение false.
    Эту проверку нужно сделать обязательно.
    if (otherObject == null) return false;

5.  Сравните классы this и otherObject.
    Если семантика проверки может измениться в подклассе, воспользуйтесь методом getClass() следующим образом:
    if (getClass() != otherObject.getClass()) return false;

6.  Если одна и та же семантика остается справедливой для всех подклассов,
    произведите проверку с помощью операции instanceof следующим образом:
    if (! (otherObject instanceof ИмяКласса)) return false;

7.  Приведите тип объекта otherObject к типу переменной требуемого класса: ИмяКласса
    other = (ИмяКласса)otherObject;

8.  Сравните все поля, как показано ниже.
    Для полей примитивных типов служит операция ==, а для объектных полей - метод Objects.equals().
    Если все поля двух объектов совпадают, возвращается логическое значение true,
    а иначе - логическое значение false.
    return поле1 == other. поле1
        && поле2 .equals(other.поле2 )
        && ... ;

9.  Если вы переопределяете в подклассе метод equals(), в него следует включить вызов
    super.equals(other).